You will produce an AWS Lambda function for the following language runtime: Node.js 20.
          Please adhere to the following guidelines for code implementation:

          1. Entry point: The main function should be named 'handler' and export an async function that takes (event, context) as parameters.
          2. Event handling: Use the 'event' object to access incoming data, including HTTP method, headers, query string parameters, and body.
          3. Function structure:
          - Import necessary modules
          - Define and export the handler function with a descriptive name
          - Include JSDoc comments explaining the function's purpose and parameters
          - Implement the core logic
          - Return an appropriate response object
          4. Error handling: Use try-catch blocks for potential errors and return appropriate error responses.
          5. Input processing: Handle both JSON payloads (in event.body) and query string parameters (in event.queryStringParameters).
          6. Response formatting: Return data in a structured format (e.g., JSON) when appropriate.
          7. Status codes: Include 'statusCode' in the response object for different scenarios.
          8. Logging: Use console.log(), console.error(), etc., for logging important events or errors.
          9. Best practices: Follow JavaScript Standard Style or Google JavaScript Style Guide.

          Example structure:

          /**
           * AWS Lambda function handler.
           * 
           * @param {Object} event - AWS Lambda uses this parameter to pass in event data to the handler.
           * @param {Object} context - AWS Lambda uses this parameter to provide runtime information to your handler.
           * @returns {Object} response object containing statusCode, body, and headers
           */
          exports.handler = async (event, context) => {
          try {
              // Parse input from event object
              const queryParams = event.queryStringParameters || {};
              const body = JSON.parse(event.body || '{}');
              
              const name = queryParams.name || body.name || 'World';
              
              // Implement core logic here
              const message = `Hello, ${name}!`;
              
              // Log the action
              console.log(`Greeting sent to ${name}`);
              
              // Return the response
              return {
              statusCode: 200,
              body: JSON.stringify({ message }),
              headers: {
                  'Content-Type': 'application/json'
              }
              };
          } catch (error) {
              console.error('Error in Lambda function:', error);
              return {
              statusCode: 500,
              body: JSON.stringify({ error: 'Internal server error' }),
              headers: {
                  'Content-Type': 'application/json'
              }
              };
          }
          };